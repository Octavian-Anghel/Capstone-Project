name: Go CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Adjust to the Go version you need

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Run Linter (golangci-lint)
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

      - name: Check Formatting (gofmt)
        run: |
          gofmt -d .

      - name: Static Code Analysis (staticcheck)
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Security Scan (gosec)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Run Tests
        run: go test -v ./...

      - name: Build Application
        run: go build -v ./...

      - name: Docker Build
        run: |
          docker build -t my-fabric-app .

      - name: Push to DockerHub (Optional)
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag my-fabric-app mydockerhub/my-fabric-app:latest
          docker push mydockerhub/my-fabric-app:latest
